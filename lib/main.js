// Generated by CoffeeScript 2.5.1
var STANDARD_ELEMENTS, content, element, fragment, i, isString, len, name, pub, tags, wrap;

import React from 'react';

fragment = function(children) {
  var child, elements;
  elements = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      if (React.isValidElement(child)) {
        results.push(child);
      } else {
        console.log(child);
        results.push(console.error("What to do with the above object?"));
      }
    }
    return results;
  })();
  return React.createElement(React.Fragment, {
    children: elements
  });
};

isString = function(object) {
  return (typeof object === 'string') || (object instanceof String);
};

content = function(value) {
  if (isString(value)) {
    return {
      children: value
    };
  } else if (Array.isArray(value)) {
    return {
      children: value
    };
  } else {
    return value;
  }
};

element = function() {
  var component, props, second, third;
  switch (arguments.length) {
    case 1:
      component = arguments[0];
      return React.createElement(component);
    case 2:
      [component, second] = arguments;
      props = content(second);
      return React.createElement(component, props);
    case 3:
      [component, props, third] = arguments;
      props.children = third;
      return React.createElement(component, props);
    default:
      console.log(arguments);
      return console.error('What to do with the above arguments?');
  }
};

wrap = function(component) {
  return function(...args) {
    return element(component, ...args);
  };
};

STANDARD_ELEMENTS = ['div', 'button'];

tags = {};

for (i = 0, len = STANDARD_ELEMENTS.length; i < len; i++) {
  name = STANDARD_ELEMENTS[i];
  tags[name] = wrap(name);
}

pub = {wrap, element, fragment, tags};

export {
  wrap,
  element,
  fragment,
  tags
};

export default pub;
